{"version":3,"sources":["components/launches/Launches.js","components/launches/Details.js","App.js","reportWebVitals.js","index.js"],"names":["GET_LAUNCHES","gql","Launches","useQuery","loading","error","data","className","width","height","viewBox","xmlns","fill","strokeWidth","strokeLinecap","cx","cy","r","launches","map","launch","bool","launch_success","mission_name","moment","launch_date_local","format","to","flight_number","GET_LAUNCH","Details","props","id","useParams","variables","parseInt","style","top","fontWeight","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","cache","InMemoryCache","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3599d8a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport moment from \"moment\";\r\n// Get All Launches\r\nconst GET_LAUNCHES = gql`\r\n  query {\r\n    launches {\r\n      mission_name\r\n      flight_number\r\n      launch_date_local\r\n      launch_success\r\n    }\r\n  }\r\n`;\r\n// Check class for color\r\nfunction checkClass(bool) {\r\n  if (bool) return \"success\";\r\n  return \"danger\";\r\n}\r\nexport default function Launches() {\r\n  const { loading, error, data } = useQuery(GET_LAUNCHES);\r\n  if (error) {\r\n    return <h1>Failed To Load Data</h1>;\r\n  }\r\n  if (loading) {\r\n    return (\r\n      <svg\r\n        className=\"spinner m-auto\" \r\n        width=\"65px\"\r\n        height=\"65px\"\r\n        viewBox=\"0 0 66 66\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <circle\r\n          className=\"path\"\r\n          fill=\"none\"\r\n          strokeWidth=\"6\"\r\n          strokeLinecap=\"round\"\r\n          cx=\"33\"\r\n          cy=\"33\"\r\n          r=\"30\"\r\n        ></circle>\r\n      </svg>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      {data.launches.map((launch) => {\r\n        return (\r\n          <div\r\n            key={launch.flight_number}\r\n            className=\"card border-secondary mb-3\"\r\n          >\r\n            <div className=\"card-body\">\r\n              <div className=\"info float-left\">\r\n                <h4 className=\"card-title\">\r\n                  Mission:{\" \"}\r\n                  <span className={\"text-\" + checkClass(launch.launch_success)}>\r\n                    {launch.mission_name}\r\n                  </span>\r\n                </h4>\r\n                <p className=\"card-text\">\r\n                  Date:{\" \"}\r\n                  {moment(launch.launch_date_local).format(\"YYYY-MM-DD hh:mm\")}\r\n                </p>\r\n              </div>\r\n              <Link\r\n                className=\"btn btn-secondary float-right\"\r\n                to={`launches/${launch.flight_number}`}\r\n              >\r\n                Launch Details\r\n              </Link>{\" \"}\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\n// Get Launch Query\r\nconst GET_LAUNCH = gql`\r\n  query Launch($flight_number: Int) {\r\n    launch(flight_number: $flight_number) {\r\n      mission_name\r\n      flight_number\r\n      launch_success\r\n      launch_year\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`;\r\n// Check class for color\r\nfunction checkClass(bool) {\r\n  if (bool) return 'success';\r\n  return 'danger';\r\n}\r\nexport default function Details(props) {\r\n  const { id } = useParams();\r\n  const { loading, error, data } = useQuery(GET_LAUNCH, {\r\n    variables: {flight_number: parseInt(id)}\r\n  });\r\n  if (error) {\r\n    return <div className=\"container\"><h1>Failed To Load Data</h1></div>;\r\n  }\r\n  if (loading) {\r\n    return  <svg\r\n    className=\"spinner\"\r\n    style={{ top: '30px' }} \r\n    width=\"65px\"\r\n    height=\"65px\"\r\n    viewBox=\"0 0 66 66\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n    <circle\r\n      className=\"path\"\r\n      fill=\"none\"\r\n      strokeWidth=\"6\"\r\n      strokeLinecap=\"round\"\r\n      cx=\"33\"\r\n      cy=\"33\"\r\n      r=\"30\"\r\n    ></circle>\r\n  </svg>;\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Launch</h1>\r\n      <h1 className=\"display-4 my-3 text-dark\" style={{fontWeight: 100}}>Mission: {data.launch.mission_name}</h1>\r\n      <h4 className=\"mb-3\">Launch Details</h4>\r\n      <ul className=\"list-group mb-3\">\r\n        <li className=\"list-group-item\">Flight Number: {data.launch.flight_number}</li>\r\n        <li className=\"list-group-item\">Launch Year: {data.launch.launch_year}</li>\r\n        <li className=\"list-group-item\">Launch Successfuly: <span className={\"text-\"+checkClass(data.launch.launch_success)}>{data.launch.launch_success ? 'Yes' : \"No\" }</span></li>\r\n      </ul>\r\n      <h4 className=\"mb-3\">Rocket Details</h4>\r\n      <ul className=\"list-group mb-3\">\r\n        <li className=\"list-group-item\">Rocket Id: {data.launch.rocket.rocket_id}</li>\r\n        <li className=\"list-group-item\">Rocket Name: {data.launch.rocket.rocket_name}</li>\r\n        <li className=\"list-group-item\">Rocket Type: {data.launch.rocket.rocket_type}</li>\r\n      </ul>\r\n      <Link className=\"btn btn-secondary\" to=\"/\">Back</Link>\r\n    </div>\r\n  );\r\n}\r\n","import \"./bootstrap.css\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport Launches from \"./components/launches/Launches\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Details from \"./components/launches/Details\";\n// Create Apollo client\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Switch>\n        {/* Default Path */}\n        <Route path=\"/\" exact>\n          <div className=\"container\">\n            <h1 className=\"display-3 my-3\">Launches</h1>\n            <div className=\"my-3\">\n              <span className=\"px-3 mr-2 bg-success\"></span>= Success\n              <br />\n              <br />\n              <span className=\"px-3 mr-2 bg-danger\"></span>= Danger\n            </div>\n            <Launches />\n          </div>\n        </Route>\n        {/* Launch Details path */}\n        <Route exact path=\"/launches/:id\" component={Details} />\n      </Switch>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}